# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# frozen_string_literal: true

require "bundler/gem_tasks"
require "rspec/core/rake_task"
require "rubocop/rake_task"
require "fileutils"

RSpec::Core::RakeTask.new(:spec)
RuboCop::RakeTask.new

# --- Configuration for Native Library Compilation ---

# The relative path to the Go source code
GO_SOURCE_DIR = File.expand_path("../../shared", __dir__)

# The base directory where compiled libraries will be stored
LIB_DIR = File.expand_path("lib/spannerlib", __dir__)

# Define all the platforms we want to build for.
# The 'key' is the directory name (matches Ruby's `RbConfig::CONFIG['arch']`)
# The 'goos' and 'goarch' are for Go's cross-compiler.
# The 'ext' is the file extension for the shared library.
PLATFORMS = {
  "aarch64-darwin" => { goos: "darwin", goarch: "arm64", ext: "dylib" },
  "x86_64-darwin"  => { goos: "darwin", goarch: "amd64", ext: "dylib" },
  "aarch64-linux"  => { goos: "linux",  goarch: "arm64", ext: "so" },
  "x86_64-linux"   => { goos: "linux",  goarch: "amd64", ext: "so" },
  "x64-mingw32"    => { goos: "windows", goarch: "amd64", ext: "dll" } # For Windows
}.freeze

# --- Rake Tasks for Compilation ---

# Create a 'compile' namespace for all build tasks
namespace :compile do
  desc "Remove all compiled native libraries"
  task :clean do
    PLATFORMS.each_key do |arch|
      target_dir = File.join(LIB_DIR, arch)
      puts "Cleaning #{target_dir}"
      rm_rf target_dir
    end
  end

  # Dynamically create a build task for each platform
  PLATFORMS.each do |arch, config|
    desc "Compile native library for #{arch}"
    task arch do
      target_dir = File.join(LIB_DIR, arch)
      output_file = File.join(target_dir, "spannerlib.#{config[:ext]}")

      mkdir_p target_dir

      # Set environment variables for cross-compilation
      env = {
        "GOOS" => config[:goos],
        "GOARCH" => config[:goarch],
        "CGO_ENABLED" => "1" # Ensure CGO is enabled for c-shared
      }

      command = [
        "go", "build",
        "-buildmode=c-shared",
        "-o", output_file,
        GO_SOURCE_DIR
      ].join(" ")

      puts "Building for #{arch}..."
      puts "[#{env.map { |k, v| "#{k}=#{v}" }.join(' ')}] #{command}"

      # Execute the build command with the correct environment
      sh env, command

      puts "Successfully built #{output_file}"
    end
  end

  desc "Compile native libraries for all platforms"
  task all: PLATFORMS.keys
end

desc "Run all build and test tasks"
task default: ["compile:all", :spec, :rubocop]
